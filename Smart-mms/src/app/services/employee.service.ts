import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Employee } from '../models/employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  baseUrl: string = "http://localhost:3000/employee";
// ржПржЯрж┐ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕рзЗрж░ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ (property) ржмрж╛ ржнрзЗрж░рж┐рзЯрзЗржмрж▓, ржпрж╛рж░ ржирж╛ржо baseUrl ржПржмржВ ржЯрж╛ржЗржк stringред
// ржПржЯрж┐ рж╣рж▓рзЛ ржЖржкржирж╛рж░ API рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ URL, ржпрзЗржЦрж╛ржирзЗ ржЖржкржирж┐ Employee-рж╕ржВржХрзНрж░рж╛ржирзНржд ржбрзЗржЯрж╛ ржкрж╛ржарж╛ржмрзЗржи, ржирж┐ржмрзЗржи, ржмрж╛ ржорзБржЫржмрзЗржиред
// ЁЯОп ржмрзНржпржмрж╣рж╛рж░ ржХрзЛржерж╛рзЯ рж╣рзЯ?
// ржПржЗ baseUrl ржЖржкржирж┐ ржирж┐ржЪрзЗрж░ ржоржд API ржХрж▓ржЧрзБрж▓рзЛрждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЗржи:
// return this.http.get(this.baseUrl);              // Get all employees
// return this.http.post(this.baseUrl, employee);   // Create employee
// return this.http.delete(this.baseUrl + "/" + id); // Delete employee by ID
// ржЕрж░рзНржерж╛рзО, ржмрж╛рж░ржмрж╛рж░ "http://localhost:3000/employee" ржирж╛ рж▓рж┐ржЦрзЗ, ржЖржкржирж┐ рж╢рзБржзрзБ this.baseUrl рж▓рж┐ржЦрзЗ ржХрж╛ржЬ рж╕рж╛рж░ржЫрзЗржиред

  constructor(private http: HttpClient) { }

// ЁЯПЧя╕П constructor ржХрзА?
// constructor рж╣рж▓ ржПржХржЯрж┐ ржмрж┐рж╢рзЗрж╖ ржлрж╛ржВрж╢ржи, ржпрж╛ ржХрзЛржирзЛ ржХрзНрж▓рж╛рж╕ (class) ржерзЗржХрзЗ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рж╛рж░ рж╕ржорзЯ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржХрж▓ (call) рж╣рзЯред
// тЬЕ constructor-ржПрж░ ржХрж╛ржЬ ржХрзА?
// ржХрзНрж▓рж╛рж╕рзЗрж░ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ржЧрзБрж▓рзЛ ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ (initialize) ржмрж╛ ржорж╛ржи рж╕рзЗржЯ ржХрж░рж╛ред
// ржбрж┐ржкрзЗржиржбрзЗржирзНрж╕рж┐ ржЗржиржЬрзЗржХрж╢ржи ржХрж░рж╛ (ржпрзЗржоржи: Angular-ржП HttpClient, Router, ржЗрждрзНржпрж╛ржжрж┐ ржЗржиржЬрзЗржХрзНржЯ ржХрж░рж╛)ред
// ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ рж╣ржУрзЯрж╛рж░ рж╕ржорзЯ ржХрж┐ржЫрзБ ржкрзНрж░рж╛ржержорж┐ржХ ржХрж╛ржЬ рж╕ржорзНржкржирзНржи ржХрж░рж╛ред
// ЁЯза ржХрзЗржи ржПржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ?
// HttpClient Angular-ржПрж░ ржмрж┐рж▓рзНржЯ-ржЗржи рж╕рж╛рж░рзНржнрж┐рж╕, ржпрж╛ ржжрж┐рзЯрзЗ ржЖржорж░рж╛ API-ржПрж░ рж╕рж╛ржерзЗ HTTP рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ 
// (GET, POST, PUT, DELETE ржЗрждрзНржпрж╛ржжрж┐) ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
// ржбрж┐ржкрзЗржиржбрзЗржирзНрж╕рж┐ ржЗржиржЬрзЗржХрж╢ржи ржмрзНржпржмрж╣рж╛рж░рзЗ ржЖржорж░рж╛ рж╕рж╣ржЬрзЗржЗ рж╕рж╛рж░рзНржнрж┐рж╕ржЧрзБрж▓рзЛрж░ ржХрзЛржб ржкрзБржиржГржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ ржПржмржВ ржЯрзЗрж╕рзНржЯрж┐ржВ рж╕рж╣ржЬ рж╣рзЯред

 // To Get All Employees
  getAllEmp(): Observable<any> {
    return this.http.get(this.baseUrl);
  }
//   ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛ (ржмрж╛ржВрж▓рж╛рзЯ):
// тЬЕ ржПржЯрж┐ ржХрзА ржХрж░рзЗ?
// getAllEmp() ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи, ржпрзЗржЯрж┐ рж╕рж╛рж░рзНржнрж╛рж░ (API) ржерзЗржХрзЗ рж╕ржмржЧрзБрж▓рзЛ Employee-ржПрж░ ржбрзЗржЯрж╛ ржирж┐рзЯрзЗ ржЖрж╕рзЗред
//   getAllEmp() API-рждрзЗ GET рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржарж╛рзЯред
// API ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржПрж▓рзЗ subscribe() ржмрзНрж▓ржХрзЗрж░ ржнрзЗрждрж░рзЗ data ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред
// this.employees ржП рж╕рзЗржЗ ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛ рж╣рзЯ, ржпрж╛ ржЖржкржирж┐ ржЯрзЗржоржкрзНрж▓рзЗржЯрзЗ ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЗржиред
// getAllEmp(): Observable<any>
// ржПржЯрж┐ ржПржХржЯрж┐ ржорзЗржержб ржмрж╛ ржлрж╛ржВрж╢ржи, ржпрж╛рж░ рж░рж┐ржЯрж╛рж░рзНржи ржЯрж╛ржЗржк рж╣рж▓рзЛ Observable<any>ред
// // Observable рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ ржбрзЗржЯрж╛ рж╕рзНржЯрзНрж░рж┐ржо ржпрж╛ ржЖржкржирж┐ subscribe ржХрж░рзЗ ржбрзЗржЯрж╛ ржкрзЗрждрзЗ ржкрж╛рж░рзЗржи (Angular-ржПрж░ HTTP ржХрж▓ рж╕ржмрж╕ржорзЯ Observable рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ)ред
// ЁЯФД Observable ржХрзА? (ржмрж╛ржВрж▓рж╛рзЯ рж╕рж╣ржЬржнрж╛ржмрзЗ)
// Observable рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ рж╕рж┐рж╕рзНржЯрзЗржо, ржпрзЗржЯрж┐ рж╕ржорзЯ ржЕржирзБржпрж╛рзЯрзА ржбрзЗржЯрж╛ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░рзЗ ржПржмржВ ржЖржкржирж┐ рж╕рзЗржЗ ржбрзЗржЯрж╛рж░ ржЬржирзНржп "subscribe" ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
// ЁЯФБ ржПржЯрж┐ ржПржХржмрж╛рж░рзЗржЗ ржбрзЗржЯрж╛ ржжрзЗрзЯ ржирж╛ тАФ ржпржЦржи ржбрзЗржЯрж╛ ржЖрж╕рзЗ, рждржЦржи ржЖржкржирж╛ржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзЗ ржжрзЗрзЯред
// ржПржЦрж╛ржирзЗ Observable<any> ржорж╛ржирзЗ рж╣рж▓рзЛ:
// тАЬржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржПржоржи ржПржХржЯрж┐ ржбрзЗржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ, ржпрзЗржЯрж╛ ржЖржкржирж┐ рж╕рж░рж╛рж╕рж░рж┐ ржПржЦржиржЗ ржкрж╛ржмрзЗржи ржирж╛ тАФ ржмрж░ржВ ржЖржкржирж┐ subscribe ржХрж░рж▓рзЗ ржкрж░рзЗ ржбрзЗржЯрж╛ ржкрзЗрзЯрзЗ ржпрж╛ржмрзЗржиредтАЭ
// Access ржХрж░рждрзЗ рж╣рзЯ	.subscribe() ржжрж┐рзЯрзЗ

  // To Add New Employee
  saveEmp(employee: Employee): Observable<any> {
    return this.http.post(this.baseUrl, employee);
  }

  // To Delete Employee
  deleteEmp(id: string): Observable<any>{
    return this.http.delete(this.baseUrl+"/"+id);
  }

  // To Find Employee By ID
  getEmployeeById(id: string): Observable<any>{
    return this.http.get(this.baseUrl+"/"+id);
  }

  // To Update Employee By Id
  updateEmp(id: string, employee: Employee): Observable<any>{
    return this.http.put(this.baseUrl+"/"+id, employee);
  }
}



